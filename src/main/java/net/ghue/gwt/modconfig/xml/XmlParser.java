package net.ghue.gwt.modconfig.xml;

import static net.ghue.gwt.modconfig.xml.Constants.*;

import java.util.logging.Logger;

import com.google.gwt.xml.client.Element;

import net.ghue.gwt.modconfig.data.CoreModule;
import net.ghue.gwt.modconfig.data.EmulatedStackRecordOption;
import net.ghue.gwt.modconfig.data.GwtModuleDataModel;

final class XmlParser {

	private static final Logger LOG = Logger.getLogger("XmlParser");

	private GwtModuleDataModel data;
	private final DocReader doc;

	public XmlParser(String xml) {
		this.doc = new DocReader(xml);
	}

	/**
	 * Parse the XML document into the data model.
	 */
	void parse(GwtModuleDataModel module) {
		this.data = module;

		doc.copyAndRemoveComment(data.getModuleName(), doc.getModuleElement());
		// Sometimes it parses the 'generated by' comment.
		if (data.getModuleName().getComment().contains(GITHUB_URL)) {
			data.getModuleName().setComment("");
		}

		data.getModuleName().parseValue(doc.getModuleElement().getAttribute(ATTR_RENAME_TO));

		for (Element entryPoint : doc.findElements(EL_ENTRY_POINT)) {
			doc.copyAndRemoveComment(data.getEntryPoint(), entryPoint);
			data.getEntryPoint().parseValue(entryPoint.getAttribute(ATTR_ENTRY_POINT_CLASS));
			doc.remove(entryPoint);
			break; // Only support 1 for now.
		}

		doc.parseConfigurationProperty(ATTR_CSS_RESOURCE_STYLE, data.getCssResourceStyle());
		parseUserAgent();
		parseCollapseAllProps();
		parseInherits();
		doc.parseProperty(ATTR_SERIALIZE_FINAL_FIELDS, data.getRpcSerializeFinalFields());
		doc.parseProperty(ATTR_SUPPRESS_FINAL_FIELD_WARNINGS, data.getRpcSuppressFinalFieldWarnings());
		doc.parseProperty(ATTR_COMPILER_STACKMODE, data.getStackMode());

		for (Element element : doc.findElements(EL_SET_CONFIG_PROPERTY, ATTR_RECORD_LINE_NUMBERS)) {
			if (Boolean.parseBoolean(element.getAttribute(ATTR_VALUE))) {
				data.setStackEmulationOption(EmulatedStackRecordOption.LINE_NUMBERS);
			}
		}
		for (Element element : doc.findElements(EL_SET_CONFIG_PROPERTY, ATTR_RECORD_FILE_NAMES)) {
			if (Boolean.parseBoolean(element.getAttribute(ATTR_VALUE))) {
				data.setStackEmulationOption(EmulatedStackRecordOption.FILE_NAMES);
			}
		}

		LOG.info("Unused elements: \n" + doc.getUnusedElements());
	}

	private void parseCollapseAllProps() {
		for (Element element : doc.findElements(EL_COLLAPSE_ALL_PROPERTIES)) {
			data.getCollapseAllProperties().setValue(true);
			doc.copyAndRemoveComment(data.getCollapseAllProperties(), element);
			doc.remove(element);
		}
	}

	private void parseInherits() {
		for (Element element : doc.findElements(EL_INHERITS)) {
			String comment = doc.findAndRemoveComment(element);

			String path = element.getAttribute(ATTR_NAME);
			if (path == null) {
				path = "";
			}

			CoreModule coreModule = CoreModule.fromPath(path);
			if (coreModule != null) {
				data.getCoreModules().setComment(data.getCoreModules().getComment() + comment);
				data.getCoreModules().getValue().add(coreModule);
				doc.remove(element);
			}

			// TODO handle 3rd party and custom values.

		}
	}

	private void parseUserAgent() {
		for (Element element : doc.findElements(EL_SET_PROPERTY, ATTR_NAME_USER_AGENT)) {
			doc.copyAndRemoveComment(data.getUserAgents(), element);
			data.getUserAgents().parseValue(element.getAttribute(ATTR_VALUE));
			doc.remove(element);
		}
	}

}