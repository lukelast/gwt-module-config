package net.ghue.gwt.modconfig.xml;

import static net.ghue.gwt.modconfig.xml.Constants.*;

import java.util.logging.Logger;

import com.google.gwt.xml.client.Document;
import com.google.gwt.xml.client.Element;
import com.google.gwt.xml.client.Node;
import com.google.gwt.xml.client.NodeList;
import com.google.gwt.xml.client.XMLParser;

import net.ghue.gwt.modconfig.data.CommentedValue;
import net.ghue.gwt.modconfig.data.GwtModuleDataModel;
import net.ghue.gwt.modconfig.data.TakesComment;
import net.ghue.gwt.modconfig.data.UserAgent;

final class XmlParser {

	private static final Logger LOG = Logger.getLogger("XmlParser");
	private GwtModuleDataModel data;
	private Document doc;
	private Element moduleRoot;
	private final String xml;

	public XmlParser(String xml) {
		this.xml = xml;
	}

	private void copyAttribute(Node node, CommentedValue<String> value, String attributeName) {
		Node attribute = node.getAttributes().getNamedItem(attributeName);
		if (attribute != null) {
			value.setValue(attribute.getNodeValue());
		}
	}

	private String findAndRemoveComment(Node node) {
		node = node.getPreviousSibling();
		if (node != null) {
			// Skip over whitespace text.
			while (node.getNodeType() == Node.TEXT_NODE && node.getPreviousSibling() != null) {
				node = node.getPreviousSibling();
			}
			if (node.getNodeType() == Node.COMMENT_NODE) {
				node.getParentNode().removeChild(node);
				return node.getNodeValue();
			}
		}
		return ""; // No comment found.
	}

	private void copyAndRemoveComment(TakesComment dest, Node node) {
		dest.setComment(findAndRemoveComment(node));
	}

	/**
	 * Parse the XML document into the data model.
	 */
	void parse(GwtModuleDataModel module) {
		this.data = module;
		doc = XMLParser.parse(xml);
		doc.normalize();
		moduleRoot = doc.getDocumentElement();

		copyAndRemoveComment(data.getModuleName(), moduleRoot);
		// Sometimes it parses the 'generated by' comment.
		if (data.getModuleName().getComment().contains(GITHUB_URL)) {
			data.getModuleName().setComment("");
		}
		data.getModuleName().setValue(moduleRoot.getAttribute(ATTR_RENAME_TO));

		NodeList entryPoints = moduleRoot.getElementsByTagName(EL_ENTRY_POINT);
		if (entryPoints.getLength() == 1) {
			Node entryPoint = entryPoints.item(0);
			copyAndRemoveComment(data.getEntryPoint(), entryPoint);
			copyAttribute(entryPoint, data.getEntryPoint(), ATTR_ENTRY_POINT_CLASS);
			moduleRoot.removeChild(entryPoint);
		}

		parseConfigurationProperty(ATTR_CSS_RESOURCE_STYLE, data.getCssResourceStyle());
		parseUserAgent();
		parseCollapseAllProps();

		moduleRoot.normalize();
		LOG.info("Unused elements: \n" + moduleRoot.getChildNodes().toString());
	}

	private void parseCollapseAllProps() {
		NodeList props = moduleRoot.getElementsByTagName(EL_COLLAPSE_ALL_PROPERTIES);
		if (props.getLength() == 1) {
			Node node = props.item(0);
			copyAndRemoveComment(data.getCollapseAllProperties(), node);
			data.getCollapseAllProperties().setValue(true);
			moduleRoot.removeChild(node);
		}
	}

	private void parseUserAgent() {
		NodeList nodes = moduleRoot.getElementsByTagName(EL_SET_PROPERTY);
		for (int i = 0; i < nodes.getLength(); i++) {
			Node node = nodes.item(i);
			Node nameAttribute = node.getAttributes().getNamedItem(ATTR_NAME);
			if (nameAttribute != null && ATTR_NAME_USER_AGENT.equals(nameAttribute.getNodeValue())) {
				Node valueAttribute = node.getAttributes().getNamedItem(ATTR_VALUE);
				if (valueAttribute != null) {
					String value = valueAttribute.getNodeValue();
					String[] tokens = value.split(",");
					for (String token : tokens) {
						UserAgent ua = UserAgent.parse(token);
						if (ua != null) {
							this.data.getUserAgents().add(ua);
						}
					}
					this.data.setUserAgentComment(findAndRemoveComment(node));
					moduleRoot.removeChild(node);
				}
			}
		}
	}

	private void parseConfigurationProperty(String name, CommentedValue<String> valueRx) {
		NodeList nodes = moduleRoot.getElementsByTagName(EL_SET_CONFIG_PROPERTY);
		for (int i = 0; i < nodes.getLength(); i++) {
			Node node = nodes.item(i);
			Node nameAttribute = node.getAttributes().getNamedItem(ATTR_NAME);
			if (nameAttribute != null && name.equals(nameAttribute.getNodeValue())) {
				Node valueAttribute = node.getAttributes().getNamedItem(ATTR_VALUE);
				if (valueAttribute != null) {
					valueRx.setValue(valueAttribute.getNodeValue());
					copyAndRemoveComment(valueRx, node);
					moduleRoot.removeChild(node);
				}
			}
		}
	}

}