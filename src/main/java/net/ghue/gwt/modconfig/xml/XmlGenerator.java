package net.ghue.gwt.modconfig.xml;

import static net.ghue.gwt.modconfig.xml.Constants.*;

import net.ghue.gwt.modconfig.data.CoreModule;
import net.ghue.gwt.modconfig.data.GwtModuleDataModel;
import net.ghue.gwt.modconfig.data.PrintableSetting;

final class XmlGenerator {

	private final GwtModuleDataModel data;
	private final DocBuilder doc = new DocBuilder();

	public XmlGenerator(GwtModuleDataModel model) {
		this.data = model;
	}

	private void appendConfigurationProperty(String name, PrintableSetting value) {
		if (value.shouldPrint()) {
			doc.appendComment(value);
			doc.setConfigProperty().name(name).value(value).build();
		}
	}

	private void appendInherits(String path) {
		doc.element(EL_INHERITS).name(path).build();
	}

	private void appendProperty(String name, PrintableSetting value) {
		if (value.shouldPrint()) {
			doc.appendComment(value.getComment());
			doc.setProperty().name(name).value(value).build();
		}
	}

	private void genCoreModules() {
		if (!data.getCoreModules().getValue().isEmpty()) {
			doc.appendComment(data.getCoreModules());
			for (CoreModule module : data.getCoreModules().getValue()) {
				appendInherits(module.getPath());
			}
		}
	}

	/**
	 * Generate an XML string.
	 */
	public String generateString() {

		// Add module name attribute to root element.
		doc.setModuleAttr(ATTR_RENAME_TO, data.getModuleName().getValue());

		if (data.getEntryPoint().shouldPrint()) {
			doc.appendComment(data.getEntryPoint());
			doc.element(EL_ENTRY_POINT).attr(ATTR_ENTRY_POINT_CLASS, data.getEntryPoint().getValueAsString()).build();
		}

		genCoreModules();

		appendProperty(ATTR_NAME_USER_AGENT, data.getUserAgents());

		if (data.getCollapseAllProperties().getValue()) {
			doc.appendComment(data.getCollapseAllProperties());
			doc.appendElement(EL_COLLAPSE_ALL_PROPERTIES);
		}

		appendProperty(ATTR_COMPILER_STACKMODE, data.getStackMode());
		switch (data.getStackEmulationOption()) {
		case LINE_NUMBERS:
			doc.setConfigProperty().name(ATTR_RECORD_LINE_NUMBERS).value(Boolean.TRUE.toString()).build();
			break;
		case FILE_NAMES:
			doc.setConfigProperty().name(ATTR_RECORD_FILE_NAMES).value(Boolean.TRUE.toString()).build();
			break;
		case NONE:
			break;
		}

		appendConfigurationProperty(ATTR_CSS_RESOURCE_STYLE, data.getCssResourceStyle());

		appendProperty(ATTR_SERIALIZE_FINAL_FIELDS, data.getRpcSerializeFinalFields());
		appendProperty(ATTR_SUPPRESS_FINAL_FIELD_WARNINGS, data.getRpcSuppressFinalFieldWarnings());

		StringBuilder header = new StringBuilder(1024);

		header.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>").append(NEWLINE);
		header.append("<!DOCTYPE module PUBLIC \"-//Google Inc.//DTD Google Web Toolkit 2.7.0//EN\"").append(NEWLINE);
		header.append("\"http://gwtproject.org/doctype/2.7.0/gwt-module.dtd\">").append(NEWLINE);

		header.append("<!-- Generated by: ").append(GITHUB_URL).append(" -->").append(NEWLINE);

		if (data.getModuleName().hasComment()) {
			header.append("<!-- ").append(data.getModuleName().getComment()).append(" -->").append(NEWLINE);
		}

		header.append(doc.toString());
		return header.toString();
	}

}
